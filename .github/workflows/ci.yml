name: Multi-Step Workflow

on:
  workflow_dispatch:
  push:
    tags:
      - v*
env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  REF_NAME: ${{ github.event.inputs.ref_name }}
  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
  MAIN_REPO: ${{ secrets.MAIN_REPO }}
jobs:
  init:
    runs-on: macos-14
    outputs:
      matrix: ${{ steps.set-matrix.outputs.value }}
      message-information: ${{ steps.get-message-information.outputs.value }}
      env: ${{ steps.set-env.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX="[{\"format\":\"IPA\",\"name\":\"macos-14\",\"platform\":\"IOS\"},{\"format\":\"APK\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"}]"
          if [[ "$REF_NAME" =~ "prd" ]]; then
            MATRIX="[{\"format\":\"IPA\",\"name\":\"macos-14\",\"platform\":\"IOS\"},{\"format\":\"APK\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"},{\"format\":\"AAB\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"}]"
          fi
          echo "value=$MATRIX" >> $GITHUB_OUTPUT

      - name: Set env
        id: set-env
        run: |
          ENV='dev'
          if [[ "$REF_NAME" =~ "prd" ]]; then
            ENV='prd'
          elif [[ "$REF_NAME" =~ "stg" ]]; then
            ENV='stg'
          fi
          echo "value=$ENV" >> $GITHUB_OUTPUT
      - name: Log value
        run: |
          echo "tag-source: $REF_NAME"
          echo "matrix: ${{ steps.set-matrix.outputs.value }}"
          echo "env: ${{ steps.set-env.outputs.value }}"

  prepare:
    name: Prepare ${{ matrix.format }}
    runs-on: ${{ matrix.name }}
    needs: [init]
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: "macos-14"
            platform: "IOS"
          - name: "ubuntu-22.04"
            platform: "ANDROID"
    steps:
      - name: Clone the GitLab repository
        run: |
          git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/unity1185445/uniscore-mobile.git
          cd uniscore-mobile
          echo "Cloning GitLab repository..."

  #     - name: Setup Node v18
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "18"
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v4
  #       with:
  #         path: uniscore-mobile/node_modules
  #         key: ${{ matrix.platform }}-cache-node-modules-${{ hashFiles('yarn.lock') }}
  #         lookup-only: true
  #     - name: Run yarn install
  #       # uses: borales/actions-yarn@v5
  #       if: steps.cache-node-modules.outputs.cache-hit != 'true'
  #       run: |
  #         cd uniscore-mobile
  #         yarn install --network-concurrency 1

  #     - name: Run tests
  #       run: echo "Testing..."
  # deploy:
  #   name: Deployment ${{ matrix.format }}
  #   continue-on-error: true
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       include: ${{ fromJson(needs.init.outputs.matrix) }}
  #   runs-on: ${{ matrix.name }}
  #   needs: [init, prepare]
  #   timeout-minutes: 60
  #   steps:
  #     # Step 3: Clone the GitLab repository manually using git
  #     - name: Clone GitLab repository
  #       run: |
  #         git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/unity1185445/uniscore-mobile.git
  #         cd uniscore-mobile
  #         git checkout feature/nguyenphp/config-cicd

  #     # # Step 4: Move all files from the cloned GitLab repository to the root directory (./)
  #     # - name: Move files to root
  #     #   run: |
  #     #     mv uniscore-mobile/* ./
  #     #     mv uniscore-mobile/.[!.]* ./
  #     #     rm -rf uniscore-mobile
  #     - name: Setup ruby 3.2.2
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: "3.2.2"
  #         bundler-cache: true
  #     - name: Bundle install
  #       working-directory: uniscore-mobile
  #       run: bundle install
  #     - name: Setup Node v18
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "18"

  #     - name: Set up JDK 17
  #       uses: actions/setup-java@v4
  #       # if: matrix.platform == 'ANDROID'
  #       with:
  #         java-version: "17"
  #         distribution: "temurin"
  #         # cache: "gradle"

  #     - name: Setup Android SDK
  #       # if: matrix.platform == 'ANDROID'
  #       uses: android-actions/setup-android@v3

  #     - name: Setup Android NDK
  #       uses: nttld/setup-ndk@v1
  #       # if: matrix.platform == 'ANDROID'
  #       with:
  #         ndk-version: r26c

  #     - name: Setup cocoapods
  #       if: matrix.platform == 'IOS'
  #       uses: maxim-lobanov/setup-cocoapods@v1
  #       with:
  #         version: 1.14.3

  #     - name: Select Xcode
  #       if: matrix.platform == 'IOS'
  #       uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: "16.0"
  #     - name: remove pod
  #       run: |
  #         rm -rf uniscore-mobile/ios/Pods
  #         rm -rf uniscore-mobile/ios/Podfile.lock
  #     - name: Cache node_modules
  #       id: cache-node-modules
  #       uses: actions/cache@v4
  #       with:
  #         path: uniscore-mobile/node_modules
  #         key: ${{ matrix.platform }}-cache-node-modules-${{ hashFiles('yarn.lock') }}
  #     - name: Cache Pods
  #       if: matrix.platform == 'IOS'
  #       id: cache-pods
  #       uses: actions/cache@v4
  #       with:
  #         path: |
  #           uniscore-mobile/ios/Pods
  #           uniscore-mobile/ios/Podfile.lock
  #         key: cache-pods-${{ hashFiles('yarn.lock') }}

  #     - name: Pod install
  #       if: ${{ (matrix.platform == 'IOS') && (steps.cache-pods.outputs.cache-hit != 'false') }}
  #       working-directory: uniscore-mobile/ios
  #       run: pod install

  #     - name: Cache Xcode build
  #       uses: irgaly/xcode-cache@v1
  #       if: matrix.platform == 'IOS'
  #       with:
  #         key: xcode-cache-deriveddata-${{ needs.init.outputs.env }}-${{ hashFiles('yarn.lock') }}
  #         restore-keys: xcode-cache-deriveddata-${{ needs.init.outputs.env }}-
  #     - name: Install certificate and provision
  #       if: matrix.platform == 'IOS'
  #       working-directory: uniscore-mobile
  #       run: bash .github/scripts/install_cert_and_provision.sh

  #     - name: Link Node (/usr/local/bin/node)
  #       if: matrix.platform == 'IOS'
  #       run: ln -s $(command -v node) /usr/local/bin/node

  #     - name: Build IPA
  #       if: matrix.format == 'IPA'
  #       working-directory: uniscore-mobile
  #       run: yarn build:ios-dev-release

  #     - name: Push to testflight
  #       if: matrix.format == 'IPA'
  #       working-directory: uniscore-mobile
  #       run: bundle exec fastlane ios testflight
  # - name: Deploy apk
  #   working-directory: uniscore-mobile
  #   run: bundle exec fastlane android beta
  # - name: Deploy APK to firebase
  #   # if: matrix.format == 'APK'
  #   uses: maierj/fastlane-action@v3.1.0
  #   with:
  #     lane: android beta
  # - name: Build AAB
  #   # if: matrix.format == 'AAB'
  #   working-directory: uniscore-mobile
  #   run: yarn b:dev-abb
