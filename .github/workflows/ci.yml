name: Multi-Step Workflow

on:
  workflow_dispatch:
    inputs:
      ref_name:
        description: "The ref name to use"
        required: true
        default: "main"
  push:
    tags:
      - v*
env:
  LC_ALL: en_US.UTF-8
  LANG: en_US.UTF-8
  REF_NAME: ${{ github.event.inputs.ref_name }}
  P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
  GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
  MAIN_REPO: ${{ secrets.MAIN_REPO }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_GROUP_ID: ${{ vars.TELEGRAM_GROUP_ID }}
  TELEGRAM_TOPIC_ID: ${{ vars.TELEGRAM_TOPIC_ID }}
jobs:
  init:
    runs-on: macos-14
    outputs:
      matrix: ${{ steps.set-matrix.outputs.value }}
      message-information: ${{ steps.get-message-information.outputs.value }}
      env: ${{ steps.set-env.outputs.value }}
    steps:
      - name: Clone GitLab repository
        run: |
          git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/unity1185445/uniscore-mobile.git
          cd uniscore-mobile
          git checkout $REF_NAME

      - name: Set matrix
        id: set-matrix
        run: |
          MATRIX="[{\"format\":\"IPA\",\"name\":\"macos-14\",\"platform\":\"IOS\"},{\"format\":\"APK\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"}]"
          if [[ "$REF_NAME" =~ "prod" ]]; then
            MATRIX="[{\"format\":\"IPA\",\"name\":\"macos-14\",\"platform\":\"IOS\"},{\"format\":\"APK\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"},{\"format\":\"AAB\",\"name\":\"ubuntu-22.04\",\"platform\":\"ANDROID\"}]"
          fi
          echo "value=$MATRIX" >> $GITHUB_OUTPUT

      - name: Set env
        id: set-env
        run: |
          ENV='dev'
          if [[ "$REF_NAME" =~ "prod" ]]; then
            ENV='prod'
          elif [[ "$REF_NAME" =~ "stag" ]]; then
            ENV='stag'
          elif [[ "$REF_NAME" =~ "beta" ]]; then
            ENV='beta'
          fi
          echo "value=$ENV" >> $GITHUB_OUTPUT

      - name: Generate message
        working-directory: uniscore-mobile
        id: get-message-information
        run: |
          source .github/scripts/utils.sh
          echo "value=$(get_message_information)" >> "$GITHUB_OUTPUT"
        timeout-minutes: 1
      - name: Log value
        run: |
          echo "tag-source: $REF_NAME"
          echo "matrix: ${{ steps.set-matrix.outputs.value }}"
          echo "env: ${{ steps.set-env.outputs.value }}"
      # - name: Send telegram message
      #   uses: UniscoreDev/macos-telegram-action@main
      #   with:
      #     type: topic
      #     message: "üé¨ -  B·∫Øt ƒë·∫ßu build: ${{ steps.get-message-information.outputs.value }}"

  prepare:
    name: Prepare ${{ matrix.format }}
    runs-on: ${{ matrix.name }}
    needs: [init]
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.init.outputs.matrix) }}
    steps:
      - name: Clone the GitLab repository
        run: |
          git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/unity1185445/uniscore-mobile.git
          cd uniscore-mobile
          git checkout $REF_NAME

      - name: Setup Node v18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: uniscore-mobile/node_modules
          key: ${{ matrix.platform }}-cache-node-modules-${{ hashFiles('uniscore-mobile/package.json') }}
          lookup-only: true
      - name: Run yarn install
        # uses: borales/actions-yarn@v5
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: |
          cd uniscore-mobile
          yarn install --network-concurrency 1

      - name: Run tests
        run: echo "Testing..."

      # - name: Send telegram message failure
      #   if: ${{ failure() }}
      #   uses: UniscoreDev/macos-telegram-action@main
      #   with:
      #     type: topic
      #     message: "üí• - Th·∫•t b·∫°i r·ªìi b·∫°n hi·ªÅn ${{ matrix.platform }}: ${{ needs.init.outputs.message-information }}"

  deploy:
    name: Deployment ${{ matrix.format }}
    continue-on-error: true
    strategy:
      fail-fast: true
      matrix:
        include: ${{ fromJson(needs.init.outputs.matrix) }}
    runs-on: ${{ matrix.name }}
    needs: [init, prepare]
    timeout-minutes: 60
    steps:
      # Step 3: Clone the GitLab repository manually using git
      - name: Clone GitLab repository
        run: |
          git clone https://oauth2:$GITLAB_TOKEN@gitlab.com/unity1185445/uniscore-mobile.git
          cd uniscore-mobile
          git checkout $REF_NAME

      # # Step 4: Move all files from the cloned GitLab repository to the root directory (./)
      # - name: Move files to root
      #   run: |
      #     mv uniscore-mobile/* ./
      #     mv uniscore-mobile/.[!.]* ./
      #     rm -rf uniscore-mobile
      - name: Setup ruby 3.1.4
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.1.4"
          bundler-cache: true
      - name: Bundle install
        working-directory: uniscore-mobile
        run: bundle install
      - name: Setup Node v18
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        if: matrix.platform == 'ANDROID'
        with:
          java-version: "17"
          distribution: "temurin"
          # cache: "gradle"

      - name: Setup Android SDK
        if: matrix.platform == 'ANDROID'
        uses: android-actions/setup-android@v3

      - name: Setup Android NDK
        uses: nttld/setup-ndk@v1
        if: matrix.platform == 'ANDROID'
        with:
          ndk-version: r26c

      - name: Setup cocoapods
        if: matrix.platform == 'IOS'
        uses: maxim-lobanov/setup-cocoapods@v1
        with:
          version: 1.16.2

      - name: Select Xcode
        if: matrix.platform == 'IOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.1.0"
      # - name: remove pod
      #   run: |
      #     rm -rf uniscore-mobile/ios/Pods
      #     rm -rf uniscore-mobile/ios/Podfile.lock
      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v4
        with:
          path: uniscore-mobile/node_modules
          key: ${{ matrix.platform }}-cache-node-modules-${{ hashFiles('uniscore-mobile/package.json') }}
      # - name: Cache Pods
      #   if: matrix.platform == 'IOS'
      #   id: cache-pods
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       uniscore-mobile/ios/Pods
      #       uniscore-mobile/ios/Podfile.lock
      #     key: cache-pods-${{ hashFiles('uniscore-mobile/package.json') }}

      - name: Pod install
        if: ${{ (matrix.platform == 'IOS') }}
        working-directory: uniscore-mobile/ios
        run: pod install
      - name: Setup Node v18
        uses: actions/setup-node@v4
        with:
          node-version: "18"
      # - name: Cache node_modules
      #   id: cache-node-modules
      #   uses: actions/cache@v4
      #   with:
      #     path: uniscore-mobile/node_modules
      #     key: ${{ matrix.platform }}-cache-node-modules-${{ hashFiles('uniscore-mobile/package.json') }}
      #     lookup-only: true
      # - name: Run yarn install
      #   # uses: borales/actions-yarn@v5
      #   run: |
      #     cd uniscore-mobile
      #     yarn install --network-concurrency 1

      # - name: Pod install
      #   if: ${{ (matrix.platform == 'IOS') }}
      #   working-directory: uniscore-mobile/ios
      #   run: pod install

      # - name: Cache Xcode build
      #   uses: irgaly/xcode-cache@v1
      #   if: matrix.platform == 'IOS'
      #   with:
      #     key: xcode-cache-deriveddata-${{ needs.init.outputs.env }}-${{ hashFiles('uniscore-mobile/package.json') }}
      #     restore-keys: xcode-cache-deriveddata-${{ needs.init.outputs.env }}-

      - name: Change version and build number
        working-directory: uniscore-mobile
        run: bash .github/scripts/change_version_and_build_number.sh

      - name: Install certificate and provision
        if: matrix.platform == 'IOS'
        working-directory: uniscore-mobile
        run: bash .github/scripts/install_cert_and_provision.sh

      - name: Link Node (/usr/local/bin/node)
        if: matrix.platform == 'IOS'
        run: ln -s $(command -v node) /usr/local/bin/node
      # Build IPA d·ª±a theo m√¥i tr∆∞·ªùng
      - name: Build IPA Dev Release
        if: ${{matrix.format == 'IPA' && needs.init.outputs.env == 'dev'}}
        working-directory: uniscore-mobile
        run: yarn build:ios-dev-release

      - name: Build IPA Staging Release
        if: ${{matrix.format == 'IPA' && needs.init.outputs.env == 'stag'}}
        working-directory: uniscore-mobile
        run: yarn build:ios-stag-release
      - name: Build IPA Beta Release
        if: ${{matrix.format == 'IPA' && needs.init.outputs.env == 'beta'}}
        working-directory: uniscore-mobile
        run: yarn build:ios-beta-release
      - name: Build IPA Staging Release
        if: ${{matrix.format == 'IPA' && needs.init.outputs.env == 'prod'}}
        working-directory: uniscore-mobile
        run: yarn build:ios-prod-release
      # Build APK d·ª±a theo m√¥i tr∆∞·ªùng
      - name: Build APK
        if: ${{matrix.format == 'APK' && needs.init.outputs.env == 'dev'}}
        working-directory: uniscore-mobile
        run: yarn build:dev:apk

      - name: Build APK Staging
        if: ${{matrix.format == 'APK' && needs.init.outputs.env == 'stag'}}
        working-directory: uniscore-mobile
        run: yarn build:stag:apk
      - name: Build APK Beta
        if: ${{matrix.format == 'APK' && needs.init.outputs.env == 'beta'}}
        working-directory: uniscore-mobile
        run: yarn build:beta:apk
      - name: Build APK Production
        if: ${{matrix.format == 'APK' && needs.init.outputs.env == 'prod'}}
        working-directory: uniscore-mobile
        run: yarn build:prod:apk
      #  Push to testflight
      - name: Push to testflight dev
        if: ${{ matrix.format == 'IPA' && needs.init.outputs.env == 'dev' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane ios testflight

      - name: Push to testflight staging
        if: ${{ matrix.format == 'IPA' && needs.init.outputs.env == 'stag' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane ios testflight_stag

      - name: Push to testflight beta
        if: ${{ matrix.format == 'IPA' && needs.init.outputs.env == 'beta' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane ios testflight_beta

      - name: Push to testflight production
        if: ${{ matrix.format == 'IPA' && needs.init.outputs.env == 'prod' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane ios testflight_prod
      # Deploy apk
      - name: Deploy apk
        if: ${{ matrix.format == 'APK' && needs.init.outputs.env == 'dev' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane android dev

      - name: Deploy apk
        if: ${{ matrix.format == 'APK' && needs.init.outputs.env == 'stag' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane android staging

      - name: Deploy apk
        if: ${{ matrix.format == 'APK' && needs.init.outputs.env == 'beta' }}
        working-directory: uniscore-mobile
        run: bundle exec fastlane android beta

      - name: Send telegram message for iOS
        if: ${{ matrix.platform == 'IOS' }}
        uses: UniscoreDev/macos-telegram-action@main
        with:
          type: topic
          message: "‚úÖ - Build th√†nh c√¥ng ${{ matrix.format }} r·ªìi h√†ng ƒë√£ c√≥ tr√™n TestFlight: ${{ needs.init.outputs.message-information }}"

      - name: Send telegram message for Android
        if: ${{ matrix.platform == 'ANDROID' }}
        uses: UniscoreDev/macos-telegram-action@main
        with:
          type: topic
          message: "‚úÖ - Build th√†nh c√¥ng ${{ matrix.format }} r·ªìi h√†ng ƒë√£ c√≥ tr√™n App Distribution: ${{ needs.init.outputs.message-information }}"

      # - name: Send telegram message failure
      #   if: ${{ failure() }}
      #   uses: UniscoreDev/macos-telegram-action@main
      #   with:
      #     type: topic
      #     message: "üí• - [${{ matrix.format }}] Th·∫•t b·∫°i: C√≥ g√¨ ƒë√≥ sai sai r·ªìi, check l·∫°i nh√© : ${{ needs.init.outputs.message-information }}"
